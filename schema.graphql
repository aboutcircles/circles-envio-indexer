type GlobalStats {
  id: ID!
  signups: BigInt!
  transfers: BigInt!
  trusts: BigInt!
}

# new schema

enum TransferType {
  Erc20WrapperTransfer
  TransferSingle
  TransferBatch
  StreamCompleted
  HubTransfer
  Transfer
}

type Transfer {
  # id is: transactionHash-logIndex
  id: ID!
  safeTxHash: String
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  transactionHash: String! @index
  logIndex: Int!
  # batchIndex: Int!
  # v1 or v2
  version: Int!
  # only for v2
  operator: String
  from: String!
  to: String!
  value: BigInt!
  # transaction type; either: Erc20WrapperTransfer | TransferSingle | TransferBatch | StreamCompleted | HubTransfer | Transfer
  transferType: TransferType!
  # is either the v2 token-id or the v1 token address; both in address format
  token: String!
}

type TrustRelation {
  # is is truster-trustee-version
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  version: Int!
  trustee: String!
  truster: String!
  # v2 only or always UInt256.MAX in case of v1
  expiryTime: BigInt!
  # v1 only or always '100' in case of v2
  limit: BigInt!
  isMutual: Boolean!
}

enum AvatarType {
  Signup
  OrganizationSignup
  RegisterHuman
  InviteHuman
  RegisterGroup
  RegisterOrganization
}

type AvatarBalance {
  # id is avatar-token
  id: ID!
  # token address in v1 and token id in v2
  token: Token!
  avatar: Avatar!
  balance: BigInt!
  version: Int!
  isWrapped: Boolean!
  inflationaryValue: BigInt
  lastCalculated: Int
}

type Avatar {
  # the avatar address
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  transactionHash: String!
  version: Int!
  avatarType: AvatarType!
  invitedBy: String
  # v1 token address or equal to avatar address if v2
  tokenId: String
  # v2 wrapped token id
  wrappedTokenId: String
  # groups only
  name: String
  # IPFS CID of the avatar's profile
  cidV0Digest: String
  # balances of all tokens
  balances: [AvatarBalance!]! @derivedFrom(field: "avatar")
  # balance of all tokens aggregated
  balance: BigInt!
  lastMint: BigInt!
}

enum TokenType {
  RegisterGroup
  RegisterHuman
  Signup
  WrappedDemurrageToken
  WrappedStaticToken
}

type Token {
  # token address in v1 and token id in v2
  id: ID!
  blockNumber: Int!
  timestamp: Int!
  transactionIndex: Int!
  logIndex: Int!
  transactionHash: String!
  version: Int!
  tokenType: TokenType!
  tokenOwner: String!
}